{"version":3,"sources":["js/actions/films.js","js/helpers/withFilmsData.js","js/components/common/sidebarFilms.js","../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","js/components/filmInfo/filmInfo.js","js/helpers/useLoadDetailFilmData.js"],"names":["updateFilm","film","type","types","payload","fetchFilms","dispatch","axios","get","concat","process","then","result","films","data","Search","catch","err","error","response","Error","withFilmsData","countShowFilms","WrappedComponent","mapDispatchToProps","connect","state","slice","isFilmsLoading","errorLoadFilms","props","useEffect","length","react_default","a","createElement","className","role","Object","assign","__webpack_require__","d","__webpack_exports__","react__WEBPACK_IMPORTED_MODULE_0__","react__WEBPACK_IMPORTED_MODULE_0___default","n","react_router_dom__WEBPACK_IMPORTED_MODULE_1__","SidebarFilms","_ref","baseUrl","map","key","imdbID","to","Title","_slicedToArray","arr","i","Array","isArray","_arrayWithHoles","_arr","_n","_d","_e","undefined","_s","_i","Symbol","iterator","next","done","push","value","_iterableToArrayLimit","TypeError","_nonIterableRest","FilmInfo","_useLoadDetailFilmDat","filmId","_useState","useState","filmData","isFilmLoading","errorLoadFilm","_useState2","slicedToArray","loadData","setLoadData","sourceAxios","CancelToken","source","cancelToken","token","isCancel","console","cancel","useLoadDetailFilmData","match","params","id","src","Poster","alt","style","maxWidth","Actors","Genre","Awards","Country","Year","Runtime","href","Website","target","sidebarFilms"],"mappings":"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","file":"static/js/6.67919d3e.chunk.js","sourcesContent":["import * as types from '../constants/films';\nimport axios from 'axios';\n\nfunction requestFilms() {\n    return {\n        type: types.FETCH_FILMS_REQUEST\n    }\n}\nfunction requestFilmsSuccess( films ) {\n    return {\n        type: types.FETCH_FILMS_SUCCESS,\n        payload: films\n    }\n}\nfunction requestFilmsFailed( error ) {\n    return {\n        type: types.FETCH_FILMS_FAILED,\n        payload: error\n    }\n}\nexport function updateFilm( film ) {\n    return {\n        type: types.UPDATE_FILM,\n        payload: film\n    }\n}\nexport function fetchFilms() {\n    return dispatch => {\n        dispatch( requestFilms() );\n        return axios.get(`https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&s=game`)\n            .then( result => {\n                dispatch( requestFilmsSuccess( result.data.Search ) );\n            })\n            .catch( err => {\n                dispatch( requestFilmsFailed( err.response.data.Error ));\n            })\n    }\n}","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchFilms, updateFilm } from '../actions/films';\n\nexport default function withFilmsData( countShowFilms ) {\n    return function (WrappedComponent) {\n        function WithFilmsData( props ) {\n            useEffect( () => {\n                if( props.films.length <= 0 ) props.fetchFilms();\n            }, []);\n            const { films, isFilmsLoading, errorLoadFilms, updateFilm } = props;\n            return (\n                <div className=\"row\">\n                    { isFilmsLoading && <div className=\"fa-2x spinner-absolute-center\"><i className=\"fas fa-spinner fa-spin\"/></div> }\n                    { errorLoadFilms && <div className=\"col-12\"><div className=\"alert alert-danger\" role=\"alert\">{ errorLoadFilms }</div></div>}\n                    { !isFilmsLoading &&\n                    <WrappedComponent\n                        { ...props }\n                        films={ films }\n                        updateFilm={updateFilm}/>\n                    }\n                </div>\n            )\n        }\n        WithFilmsData.propTypes = {\n            films: PropTypes.arrayOf(PropTypes.shape({\n                Poster: PropTypes.string.isRequired,\n                Title: PropTypes.string.isRequired,\n                Year: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.string\n                ]).isRequired\n            })),\n            isFilmsLoading: PropTypes.bool.isRequired,\n            errorLoadFilms: PropTypes.string\n        };\n        const mapStateToProps = state => {\n            let films = state.films.films;\n            if( countShowFilms ) films = films.slice(0, countShowFilms + 1);\n            return {\n                films,\n                isFilmsLoading: state.films.isFilmsLoading,\n                errorLoadFilms: state.films.errorLoadFilms\n            }\n        }\n        const mapDispatchToProps = {\n            fetchFilms,\n            updateFilm,\n        }\n        return connect(mapStateToProps, mapDispatchToProps)(WithFilmsData);\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { NavLink } from 'react-router-dom';\n\nfunction SidebarFilms ({ films, baseUrl }){\n    function handleMapFilms(film) {\n        return(\n            <li key={film.imdbID}>\n                <NavLink to={`${baseUrl}/${film.imdbID}`}>{ film.Title }</NavLink>\n            </li>\n        )\n    }\n    return (\n        <div className=\"col-md-4 sidebar-films\">\n            <h4 className=\"sidebar-films__title\">All films</h4>\n            <ul>\n                { films.map( handleMapFilms )}\n            </ul>\n        </div>\n    )\n}\nSidebarFilms.propTypes = {\n    baseUrl: PropTypes.string.isRequired,\n    films: PropTypes.arrayOf(PropTypes.shape({\n        Title: PropTypes.string.isRequired,\n        imdbID: PropTypes.string.isRequired\n    }))\n};\nexport default SidebarFilms;","import arrayWithHoles from \"./arrayWithHoles\";\nimport iterableToArrayLimit from \"./iterableToArrayLimit\";\nimport nonIterableRest from \"./nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withFilmsData from '../../helpers/withFilmsData';\nimport useLoadDetailFilmData from '../../helpers/useLoadDetailFilmData';\nimport SidebarFilms from '../common/sidebarFilms';\n\nexport function FilmInfo ({ films, match }){\n    let { isFilmLoading, filmData, errorLoadFilm } = useLoadDetailFilmData(match.params.id);\n    return (\n        <div className=\"col-12\">\n            <div className=\"row\">\n                <div className=\"col-8\">\n                    { isFilmLoading && <div className=\"fa-2x spinner-absolute-center\"><i className=\"fas fa-spinner fa-spin\"/></div> }\n                    { errorLoadFilm && <div className=\"col-12\"><div className=\"alert alert-danger\" role=\"alert\">{ errorLoadFilm }</div></div>}\n                    { !isFilmLoading && filmData &&\n                        <div className=\"row\">\n                            <div className=\"col-12\">\n                                <h3>{ filmData.Title }</h3>\n                            </div>\n                            <div className=\"col-sm-6\">\n                                <img src={ filmData.Poster } alt=\"\" style={{ maxWidth: '100%'}}/>\n                            </div>\n                            <div className=\"col-sm-6\">\n                                <ul>\n                                    <li><b>Actors: </b>{ filmData.Actors }</li>\n                                    <li><b>Genre: </b>{ filmData.Genre }</li>\n                                    <li><b>Awards: </b>{ filmData.Awards }</li>\n                                    <li><b>Country: </b>{ filmData.Country }</li>\n                                    <li><b>Year: </b>{ filmData.Year }</li>\n                                    <li><b>Runtime: </b>{ filmData.Runtime }</li>\n                                    <li><a href={ filmData.Website } target=\"_blank\">website</a></li>\n                                </ul>\n                            </div>\n                        </div>\n                    }\n                </div>\n                <SidebarFilms films={ films } baseUrl={'/film-info'}/>\n            </div>\n        </div>\n    )\n}\n\nFilmInfo.propTypes = {\n    films: PropTypes.arrayOf(PropTypes.shape({\n        imdbID: PropTypes.string.isRequired,\n        Poster: PropTypes.string.isRequired,\n        Title: PropTypes.string.isRequired,\n        Year: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]).isRequired\n    }))\n};\nexport default withFilmsData()(FilmInfo);","import { useState, useEffect } from 'react';\nimport axios from \"axios/index\";\n\nexport default function useLoadDetailFilmData( filmId ) {\n    const [ loadData, setLoadData ] = useState({\n        filmData: null,\n        isFilmLoading: true,\n        errorLoadFilm: ''\n    });\n    useEffect( () => {\n        const sourceAxios = axios.CancelToken.source();\n        setLoadData({ isFilmLoading: true, filmData: null, errorLoadFilm: '' });\n        axios.get( `https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&i=${filmId}`,\n            { cancelToken: sourceAxios.token }\n        )\n            .then( result => {\n                if( result.data.Error ) {\n                    setLoadData({ isFilmLoading: false, filmData: null, errorLoadFilm: result.data.Error });\n                }\n                else setLoadData({ isFilmLoading: false, filmData: result.data, errorLoadFilm: '' });\n            })\n            .catch( error => {\n                if (axios.isCancel(error)) console.error('Request canceled', error);\n                else setLoadData({ isFilmLoading: false, filmData: null, errorLoadFilm: error.response.data.Error });\n            })\n        return () => sourceAxios.cancel();\n    }, [filmId] );\n\n    return loadData;\n}"],"sourceRoot":""}