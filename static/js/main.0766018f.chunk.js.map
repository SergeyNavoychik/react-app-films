{"version":3,"sources":["js/components/common/header.js","js/components/common/footer.js","js/components/itemFilmCard.js","js/components/viewFilm.js","js/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","itemFilmCard","_ref","title","description","poster","src","alt","ViewFilm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","filmData","isLoading","error","getFilmData","_this2","axios","get","concat","process","then","data","Title","Plot","Poster","setState","catch","err","response","Error","_this$state","role","components_itemFilmCard","Component","App","viewFilm","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0766018f.chunk.js","sourcesContent":["import React from 'react';\nexport default function Header () {\n    return(\n        <header>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <span className=\"navbar-brand\" href=\"#\">Films App</span>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            {/*<a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>*/}\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    )\n}","import React from 'react';\nexport default function Footer () {\n    return(\n        <footer>\n            <p className=\"text-center\">Â© 2018 Copyright</p>\n        </footer>\n    )\n}","import React from 'react'\n\nfunction itemFilmCard ({ title, description, poster }){\n    return (\n        <div className=\"col-md-3\">\n            <div className=\"item-field-card\">\n                <img className=\"item-field-card__image\" src={ poster } alt=\"Card\"/>\n                <div className=\"item-field-card__body\">\n                    <h5 className=\"body__title\">{ title }</h5>\n                    <p>{ description }</p>\n                </div>\n            </div>\n        </div>\n    )\n}\nexport default itemFilmCard","import React, { Component } from 'react'\nimport ItemFilmCard from './itemFilmCard';\nimport axios from 'axios';\n\nclass ViewFilm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmData: null,\n            isLoading: true,\n            error: null,\n        };\n    }\n    componentDidMount(){\n        this.getFilmData();\n    }\n    getFilmData(){\n        axios.get(`https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&t=kingdom`)\n            .then( ( { data } ) => {\n                let filmData = {\n                    title: data.Title,\n                    description: data.Plot,\n                    poster: data.Poster,\n                }\n                this.setState({\n                    filmData,\n                    isLoading: false\n                })\n            })\n            .catch( err => {\n                let error = err.response.data.Error;\n                this.setState({\n                    error,\n                    isLoading: false\n                })\n\n            })\n    }\n\n    render() {\n        let { isLoading, filmData, error } = this.state;\n\n        return (\n            <div className=\"row\">\n                { error && <div className=\"alert alert-danger\" role=\"alert\">{ error }</div>}\n                { !isLoading && !error && <ItemFilmCard {...filmData}/> }\n                { isLoading && <div className=\"fa-1x col-12 text-center\"><i className=\"fas fa-spinner fa-spin\"/></div> }\n            </div>\n        )\n    }\n}\n\nexport default ViewFilm","import React, { Component } from 'react';\nimport Header from './components/common/header';\nimport Footer from './components/common/footer';\nimport ViewFilm from './components/viewFilm';\n\nclass App extends Component {\n  render() {\n    return (\n        <div>\n            <Header/>\n            <main>\n                <div className=\"container\">\n                    <ViewFilm/>\n                </div>\n            </main>\n            <Footer/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}