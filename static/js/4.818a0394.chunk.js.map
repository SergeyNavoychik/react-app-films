{"version":3,"sources":["js/actions/films.js","js/helpers/withFilmsData.js","js/components/listOfFilms/itemFilm.js","js/components/listOfFilms/listOfFilms.js"],"names":["updateFilm","film","type","types","payload","fetchFilms","dispatch","axios","get","concat","process","then","result","films","data","Search","catch","err","error","response","Error","withFilmsData","countShowFilms","WrappedComponent","mapDispatchToProps","connect","state","slice","isFilmsLoading","errorLoadFilms","props","useEffect","length","react_default","a","createElement","className","role","Object","assign","__webpack_require__","d","__webpack_exports__","ItemFilm","_ref","filmData","index","scope","Title","Year","Link","to","imdbID","ListOfFilmsWithFilmsData","map","item","itemFilm","key"],"mappings":"6IAoBO,SAASA,EAAYC,GACxB,MAAO,CACHC,KAAMC,IACNC,QAASH,GAGV,SAASI,IACZ,OAAO,SAAAC,GAEH,OADAA,EAxBG,CACHJ,KAAMC,MAwBCI,IAAMC,IAAN,mCAAAC,OAA6CC,WAA7C,YACFC,KAAM,SAAAC,GAtBnB,IAA8BC,EAuBdP,GAvBcO,EAuBiBD,EAAOE,KAAKC,OAtBhD,CACHb,KAAMC,IACNC,QAASS,OAsBJG,MAAO,SAAAC,GAnBpB,IAA6BC,EAoBbZ,GApBaY,EAoBiBD,EAAIE,SAASL,KAAKM,MAnBrD,CACHlB,KAAMC,IACNC,QAASc,QCZF,SAASG,EAAeC,GACnC,OAAO,SAAUC,GA+Bb,IASMC,EAAqB,CACvBnB,aACAL,cAEJ,OAAOyB,YAbiB,SAAAC,GACpB,IAAIb,EAAQa,EAAMb,MAAMA,MAExB,OADIS,IAAiBT,EAAQA,EAAMc,MAAM,EAAGL,EAAiB,IACtD,CACHT,QACAe,eAAgBF,EAAMb,MAAMe,eAC5BC,eAAgBH,EAAMb,MAAMgB,iBAOJL,EAAzBC,CA3CP,SAAwBK,GACpBC,oBAAW,WACHD,EAAMjB,MAAMmB,QAAU,GAAIF,EAAMzB,cACrC,IAHyB,IAIpBQ,EAAsDiB,EAAtDjB,MAAOe,EAA+CE,EAA/CF,eAAgBC,EAA+BC,EAA/BD,eAAgB7B,EAAe8B,EAAf9B,WAC/C,OACIiC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,OACTR,GAAkBK,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iCAAgCH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,4BAC9EP,GAAkBI,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UAASH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBAAqBC,KAAK,SAAUR,KAC5FD,GACHK,EAAAC,EAAAC,cAACZ,EAADe,OAAAC,OAAA,GACST,EADT,CAEIjB,MAAQA,EACRb,WAAYA,SApBpCwC,EAAAC,EAAAC,EAAA,sBAAArB,gFC6BesB,MAzBf,SAAAC,GAAuC,IAAlBC,EAAkBD,EAAlBC,SAAUC,EAAQF,EAARE,MAC3B,OACIb,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIY,MAAM,OAAQD,GAClBb,EAAAC,EAAAC,cAAA,UAAMU,EAASG,OACff,EAAAC,EAAAC,cAAA,UAAMU,EAASI,MACfhB,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAE,SAAA1C,OAAWoC,EAASO,SAAUnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,gBACnDH,EAAAC,EAAAC,cAACe,EAAA,EAAD,CAAMC,GAAE,cAAA1C,OAAgBoC,EAASO,SAAUnB,EAAAC,EAAAC,cAAA,KAAGC,UAAU,mBC6BxE,IAAMiB,EAA2BhC,YAAe,GAAfA,CApCjC,SAAuBS,GAOnB,OACIG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,uBACbH,EAAAC,EAAAC,cAAA,aACAF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,MAAIY,MAAM,OAAV,KACAd,EAAAC,EAAAC,cAAA,MAAIY,MAAM,OAAV,SACAd,EAAAC,EAAAC,cAAA,MAAIY,MAAM,OAAV,QACAd,EAAAC,EAAAC,cAAA,MAAIY,MAAM,OAAV,aAGJd,EAAAC,EAAAC,cAAA,aACEL,EAAMjB,MAAMyC,IAlB1B,SAAwBC,EAAMT,GAC1B,OAAOb,EAAAC,EAAAC,cAACqB,EAAD,CACKC,IAAKF,EAAKH,OACVN,MAAOA,EAAQ,EACfD,SAAUU,WAgCfF","file":"static/js/4.818a0394.chunk.js","sourcesContent":["import * as types from '../constants/films';\nimport axios from 'axios';\n\nfunction requestFilms() {\n    return {\n        type: types.FETCH_FILMS_REQUEST\n    }\n}\nfunction requestFilmsSuccess( films ) {\n    return {\n        type: types.FETCH_FILMS_SUCCESS,\n        payload: films\n    }\n}\nfunction requestFilmsFailed( error ) {\n    return {\n        type: types.FETCH_FILMS_FAILED,\n        payload: error\n    }\n}\nexport function updateFilm( film ) {\n    return {\n        type: types.UPDATE_FILM,\n        payload: film\n    }\n}\nexport function fetchFilms() {\n    return dispatch => {\n        dispatch( requestFilms() );\n        return axios.get(`https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&s=game`)\n            .then( result => {\n                dispatch( requestFilmsSuccess( result.data.Search ) );\n            })\n            .catch( err => {\n                dispatch( requestFilmsFailed( err.response.data.Error ));\n            })\n    }\n}","import React, { useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport { fetchFilms, updateFilm } from '../actions/films';\n\nexport default function withFilmsData( countShowFilms ) {\n    return function (WrappedComponent) {\n        function WithFilmsData( props ) {\n            useEffect( () => {\n                if( props.films.length <= 0 ) props.fetchFilms();\n            }, []);\n            const { films, isFilmsLoading, errorLoadFilms, updateFilm } = props;\n            return (\n                <div className=\"row\">\n                    { isFilmsLoading && <div className=\"fa-2x spinner-absolute-center\"><i className=\"fas fa-spinner fa-spin\"/></div> }\n                    { errorLoadFilms && <div className=\"col-12\"><div className=\"alert alert-danger\" role=\"alert\">{ errorLoadFilms }</div></div>}\n                    { !isFilmsLoading &&\n                    <WrappedComponent\n                        { ...props }\n                        films={ films }\n                        updateFilm={updateFilm}/>\n                    }\n                </div>\n            )\n        }\n        WithFilmsData.propTypes = {\n            films: PropTypes.arrayOf(PropTypes.shape({\n                Poster: PropTypes.string.isRequired,\n                Title: PropTypes.string.isRequired,\n                Year: PropTypes.oneOfType([\n                    PropTypes.number,\n                    PropTypes.string\n                ]).isRequired\n            })),\n            isFilmsLoading: PropTypes.bool.isRequired,\n            errorLoadFilms: PropTypes.string\n        };\n        const mapStateToProps = state => {\n            let films = state.films.films;\n            if( countShowFilms ) films = films.slice(0, countShowFilms + 1);\n            return {\n                films,\n                isFilmsLoading: state.films.isFilmsLoading,\n                errorLoadFilms: state.films.errorLoadFilms\n            }\n        }\n        const mapDispatchToProps = {\n            fetchFilms,\n            updateFilm,\n        }\n        return connect(mapStateToProps, mapDispatchToProps)(WithFilmsData);\n    }\n}","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { Link } from 'react-router-dom';\n\nfunction ItemFilm ({ filmData, index }){\n    return (\n        <tr>\n            <th scope=\"row\">{ index }</th>\n            <td>{ filmData.Title }</td>\n            <td>{ filmData.Year }</td>\n            <td>\n                <Link to={`/edit/${filmData.imdbID}`}><i className=\"fas fa-pen\"/></Link>\n                <Link to={`/film-info/${filmData.imdbID}`}><i className=\"fas fa-eye\"/></Link>\n            </td>\n        </tr>\n    )\n}\nItemFilm.propTypes = {\n    index: PropTypes.number.isRequired,\n    filmData: PropTypes.shape({\n        imdbID: PropTypes.string.isRequired,\n        Poster: PropTypes.string.isRequired,\n        Title: PropTypes.string.isRequired,\n        Year: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]).isRequired\n    })\n};\nexport default ItemFilm;","import React from 'react';\nimport PropTypes from 'prop-types';\nimport withFilmsData from '../../helpers/withFilmsData';\nimport ItemFilm from './itemFilm';\n\nfunction ListOfFilms ( props ) {\n    function mapFilmsData ( item, index ) {\n        return <ItemFilm\n                    key={item.imdbID}\n                    index={index + 1}\n                    filmData={item}/>\n    }\n    return (\n        <div className=\"col-12\">\n            <table className=\"table table-striped\">\n                <thead>\n                <tr>\n                    <th scope=\"col\">#</th>\n                    <th scope=\"col\">Title</th>\n                    <th scope=\"col\">Year</th>\n                    <th scope=\"col\">Actions</th>\n                </tr>\n                </thead>\n                <tbody>\n                { props.films.map( mapFilmsData ) }\n                </tbody>\n            </table>\n        </div>\n    )\n}\nListOfFilms.propTypes = {\n    films: PropTypes.arrayOf(PropTypes.shape({\n        imdbID: PropTypes.string.isRequired,\n        Poster: PropTypes.string.isRequired,\n        Title: PropTypes.string.isRequired,\n        Year: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]).isRequired\n    }))\n};\nconst ListOfFilmsWithFilmsData = withFilmsData( 10 )( ListOfFilms );\nexport default ListOfFilmsWithFilmsData;\n"],"sourceRoot":""}