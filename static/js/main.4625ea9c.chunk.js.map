{"version":3,"sources":["js/reducers/films.js","js/reducers/index.js","js/store/index.js","js/components/common/header.js","js/components/common/footer.js","js/App.js","serviceWorker.js","index.js","js/constants/films.js"],"names":["initialState","films","isFilmsLoading","errorLoadFilms","combineReducers","state","arguments","length","undefined","action","type","types","Object","objectSpread","payload","map","film","imdbID","createStore","rootReducer","applyMiddleware","thunk","Header","react_default","a","createElement","className","href","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","NavLink","to","exact","Footer","Home","lazy","__webpack_require__","e","then","bind","Dashboard","Promise","all","ListOfFilms","EditFilm","FilmInfo","App","es","store","BrowserRouter","basename","react","fallback","Switch","Route","path","component","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","d","__webpack_exports__","FETCH_FILMS_REQUEST","FETCH_FILMS_SUCCESS","FETCH_FILMS_FAILED","UPDATE_FILM"],"mappings":"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","file":"static/js/main.4625ea9c.chunk.js","sourcesContent":["import * as types from '../constants/films';\n\nconst initialState = {\n    films: [],\n    isFilmsLoading: false,\n    errorLoadFilms: null\n}\n\nexport default function films ( state = initialState, action ) {\n    switch (action.type) {\n        case types.FETCH_FILMS_REQUEST:\n            return { ...state, isFilmsLoading: true };\n        case types.FETCH_FILMS_FAILED:\n            return { ...state, isFilmsLoading: false, errorLoadFilms: action.payload };\n        case types.FETCH_FILMS_SUCCESS:\n            return { ...state, isFilmsLoading: false, errorLoadFilms: null, films: action.payload };\n        case types.UPDATE_FILM:\n            let films = state.films.map( film => {\n                if( action.payload.imdbID === film.imdbID ) return action.payload;\n                else return film;\n            });\n            return { ...state, films };\n        default:\n            return state\n    }\n}","import { combineReducers } from 'redux';\nimport films from './films';\n\nexport default combineReducers({\n    films,\n})","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers/index'\n\nexport default createStore(\n    rootReducer,\n    applyMiddleware(thunk)\n)","import React from 'react';\nimport { NavLink } from 'react-router-dom';\n\nexport default function Header () {\n    return(\n        <header>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <span className=\"navbar-brand\" href=\"#\">Films App</span>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"/>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <div className=\"navbar-nav\">\n                        <NavLink to=\"/\" exact className=\"nav-item nav-link\">Home</NavLink>\n                        <NavLink to=\"/dashboard/\" className=\"nav-item nav-link\">Dashboard</NavLink>\n                        <NavLink to=\"/list/\" className=\"nav-item nav-link\">List</NavLink>\n                    </div>\n                </div>\n            </nav>\n        </header>\n    )\n}","import React from 'react';\nexport default function Footer () {\n    return(\n        <footer>\n            <p className=\"text-center\">Â© 2018 Copyright</p>\n        </footer>\n    )\n}","import React, { lazy, Suspense } from 'react';\nimport { Provider } from 'react-redux';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport store from './store/index';\nimport Header from './components/common/header';\nimport Footer from './components/common/footer';\n\nconst Home = lazy( () => import('./components/common/home') );\nconst Dashboard = lazy( () => import('./components/dashboard/dashboard') );\nconst ListOfFilms = lazy( () => import('./components/listOfFilms/listOfFilms') );\nconst EditFilm = lazy( () => import('./components/editFilm/editFilm') );\nconst FilmInfo = lazy( () => import('./components/filmInfo/filmInfo') );\n\nfunction App () {\n    return (\n        <Provider store={ store }>\n            <Router basename=\"/react-app-films\">\n                <div className=\"app-container\">\n                    <Header/>\n                    <main>\n                        <div className=\"container\">\n                            <Suspense fallback={<div>Loading...</div>}>\n                                <Switch>\n                                    <Route path=\"/\" exact component={Home} />\n                                    <Route path=\"/dashboard\" component={Dashboard} />\n                                    <Route path=\"/list\" component={ListOfFilms} />\n                                    <Route path=\"/edit/:id\" component={EditFilm} />\n                                    <Route path=\"/film-info/:id\" component={FilmInfo} />\n                                </Switch>\n                            </Suspense>\n                        </div>\n                    </main>\n                    <Footer/>\n                </div>\n            </Router>\n        </Provider>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","export const FETCH_FILMS_REQUEST = \"FETCH_FILMS_REQUEST\"\nexport const FETCH_FILMS_SUCCESS = \"FETCH_FILMS_SUCCESS\"\nexport const FETCH_FILMS_FAILED = \"FETCH_FILMS_FAILED\"\nexport const UPDATE_FILM = \"UPDATE_FILM\""],"sourceRoot":""}