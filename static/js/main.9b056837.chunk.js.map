{"version":3,"sources":["js/components/common/header.js","js/components/common/footer.js","js/components/listOfFilms/itemFilm.js","js/components/listOfFilms/editFilm.js","js/components/listOfFilms/listOfFilms.js","js/App.js","serviceWorker.js","index.js"],"names":["Header","react_default","a","createElement","className","href","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","id","Footer","ItemFilm","_ref","filmData","onClickEditFilm","src","Poster","alt","Title","Year","onClick","EditFilm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChangeForm","e","_e$target","target","name","value","errors","objectSpread","state","setState","defineProperty","handleSubmitForm","preventDefault","_this$state","onSave","_this$state2","_this$state2$filmData","onClose","onSubmit","htmlFor","onChange","classNames","is-invalid","style","marginRight","Component","ListOfFilms","getFilmsData","axios","get","concat","process","then","filmsData","data","Search","isLoading","catch","err","error","response","Error","handleEditFilm","filmDataForEdit","viewType","handleCloseEdit","handleSaveEditResults","newFilmData","map","film","imdbID","mapFilmsData","item","itemFilm","key","justify-content-center","role","editFilm","App","listOfFilms","Boolean","window","location","hostname","match","ReactDOM","render","js_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9b056837.chunk.js","sourcesContent":["import React from 'react';\nexport default function Header () {\n    return(\n        <header>\n            <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                <span className=\"navbar-brand\" href=\"#\">Films App</span>\n                <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n                    <span className=\"navbar-toggler-icon\"></span>\n                </button>\n\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n                    <ul className=\"navbar-nav mr-auto\">\n                        <li className=\"nav-item active\">\n                            {/*<a className=\"nav-link\" href=\"#\">Home <span className=\"sr-only\">(current)</span></a>*/}\n                        </li>\n                    </ul>\n                </div>\n            </nav>\n        </header>\n    )\n}","import React from 'react';\nexport default function Footer () {\n    return(\n        <footer>\n            <p className=\"text-center\">Â© 2018 Copyright</p>\n        </footer>\n    )\n}","import React from 'react';\nimport PropTypes from 'prop-types';\n\nfunction ItemFilm ({ filmData, onClickEditFilm }){\n    function handleClickEditFilm() {\n        onClickEditFilm(filmData);\n    }\n    return (\n        <div className=\"col-sm-6 col-md-4 col-lg-3 item-film-card\">\n            <div className=\"item-film-card__content\">\n                <img className=\"item-field-card__image\" src={ filmData.Poster } alt=\"Card\"/>\n                <div className=\"item-field-card__body\">\n                    <div>\n                        <h5 className=\"body__title\">{ filmData.Title }</h5>\n                        <p>{ filmData.Year }</p>\n                    </div>\n                    <div className=\"item-field-card__buttons\">\n                        <button className=\"item-field-card__btn\" onClick={handleClickEditFilm}>\n                            <i className=\"fas fa-pen\"/>\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n    )\n}\nItemFilm.propTypes = {\n    onClickEditFilm: PropTypes.func.isRequired,\n    filmData: PropTypes.shape({\n        Title: PropTypes.string.isRequired,\n        Year: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]).isRequired\n    })\n};\nexport default ItemFilm;","import React, { Component } from 'react';\nimport classNames from 'classnames';\nimport PropTypes from \"prop-types\";\n\nclass EditFilm extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmData: props.filmData,\n            errors: {\n                Title: null,\n                Year: null,\n            }\n        };\n    }\n    handleChangeForm = e => {\n        let { name, value } = e.target,\n            errors = { ...this.state.errors };\n        if(!value) errors[name] = \"Field is required.\";\n        else errors[name] = null;\n        this.setState({\n            errors,\n            filmData: { ...this.state.filmData, [name]: value }\n        });\n    }\n    handleSubmitForm = e => {\n        e.preventDefault();\n        let { filmData, errors } = this.state;\n        if( !errors.Title && !errors.Year ) this.props.onSave( filmData );\n    }\n    render() {\n        let { filmData: { Title, Year }, errors } = this.state,\n            { onClose } = this.props;\n\n        return (\n            <div className=\"col-6\">\n                <form onSubmit={this.handleSubmitForm}>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"title\">Title</label>\n                        <input type=\"text\"\n                               onChange={ this.handleChangeForm }\n                               value={Title}\n                               className={classNames( 'form-control', { 'is-invalid': errors.Title } )}\n                               name=\"Title\"\n                               id=\"title\"/>\n                        { errors.Title && <div className=\"invalid-feedback\">{ errors.Title }</div>}\n                    </div>\n                    <div className=\"form-group\">\n                        <label htmlFor=\"year\">Year</label>\n                        <input type=\"text\"\n                               onChange={ this.handleChangeForm }\n                               value={Year}\n                               className={classNames( 'form-control', { 'is-invalid': errors.Year } )}\n                               name=\"Year\"\n                               id=\"year\"/>\n                        { errors.Year && <div className=\"invalid-feedback\">{ errors.Year }</div>}\n                    </div>\n                    <button type=\"submit\" className=\"btn btn-primary\" style={ { marginRight: '10px' } }>Save</button>\n                    <button type=\"button\" className=\"btn btn-primary\" onClick={ onClose }>Close</button>\n                </form>\n            </div>\n        )\n    }\n}\nEditFilm.propTypes = {\n    onClose: PropTypes.func.isRequired,\n    onSave: PropTypes.func.isRequired,\n    filmData: PropTypes.shape({\n        Poster: PropTypes.string.isRequired,\n        Title: PropTypes.string.isRequired,\n        Year: PropTypes.oneOfType([\n            PropTypes.number,\n            PropTypes.string\n        ]).isRequired\n    })\n};\nexport default EditFilm;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport classNames from 'classnames';\nimport ItemFilm from './itemFilm';\nimport EditFilm from './editFilm';\n\nclass ListOfFilms extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            filmsData: [],\n            viewType: 'list',\n            filmDataForEdit: null,\n            isLoading: true,\n            error: null,\n        };\n    }\n    componentDidMount(){\n        this.getFilmsData();\n    }\n    getFilmsData = () => {\n        axios.get(`https://www.omdbapi.com/?apikey=${process.env.REACT_APP_OMDB_KEY}&s=game`)\n            .then( ( { data } ) => {\n                let filmsData = data.Search;\n                this.setState({\n                    filmsData,\n                    isLoading: false\n                })\n            })\n        .catch( err => {\n                let error = err.response.data.Error;\n                this.setState({\n                    error,\n                    isLoading: false\n                })\n            })\n    }\n    handleEditFilm = filmDataForEdit => {\n        this.setState({\n            filmDataForEdit,\n            viewType: 'editList'\n        });\n    }\n    handleCloseEdit = () => {\n        this.setState({\n            viewType: 'list',\n            filmDataForEdit: null\n        });\n    }\n    handleSaveEditResults = newFilmData => {\n        let filmsData = this.state.filmsData.map( film => {\n            if(film.imdbID === newFilmData.imdbID) return newFilmData;\n            else return film;\n        })\n        this.setState({\n            filmsData,\n            viewType: 'list',\n            filmDataForEdit: null\n        })\n    }\n    mapFilmsData = ( item ) => {\n        return <ItemFilm\n                    key={item.imdbID}\n                    onClickEditFilm={this.handleEditFilm}\n                    filmData={item}/>\n    }\n    render() {\n        let { isLoading, filmsData, error, viewType, filmDataForEdit } = this.state;\n\n        return (\n            <div className=\"container\">\n                <div className={ classNames( 'row', { 'justify-content-center': viewType === 'editList' } ) }>\n                    { isLoading && <div className=\"fa-2x spinner-absolute-center\"><i className=\"fas fa-spinner fa-spin\"/></div> }\n                    { error && <div className=\"col-12\"><div className=\"alert alert-danger\" role=\"alert\">{ error }</div></div>}\n                    { viewType === 'list' && filmsData.map( this.mapFilmsData ) }\n                    { viewType === 'editList' && <EditFilm\n                                                        onClose={ this.handleCloseEdit}\n                                                        onSave={ this.handleSaveEditResults }\n                                                        filmData={filmDataForEdit}/> }\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default ListOfFilms;","import React, { Component } from 'react';\nimport Header from './components/common/header';\nimport Footer from './components/common/footer';\nimport ListOfFilms from './components/listOfFilms/listOfFilms';\n\nclass App extends Component {\n  render() {\n    return (\n        <div className=\"app-container\">\n            <Header/>\n            <main>\n                <ListOfFilms/>\n            </main>\n            <Footer/>\n        </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import 'bootstrap'\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './js/App';\nimport * as serviceWorker from './serviceWorker';\nimport './scss/index.scss';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}